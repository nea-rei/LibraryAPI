// <auto-generated />
using System;
using LibraryAPI.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240111140212_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook", "Library");
                });

            modelBuilder.Entity("LibraryAPI.Model.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorIdentity")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorIdentity")
                        .IsUnique();

                    b.ToTable("Author", "Library");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorIdentity = 456789,
                            FirstName = "Anna",
                            LastName = "Burns"
                        },
                        new
                        {
                            Id = 2,
                            AuthorIdentity = 456123,
                            FirstName = "Bo",
                            LastName = "Tag"
                        },
                        new
                        {
                            Id = 3,
                            AuthorIdentity = 789464,
                            FirstName = "Tom",
                            LastName = "Pip"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Model.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Available")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Book", "Library");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = "False",
                            ISBN = 54612312,
                            ReleaseYear = 2010,
                            Title = "Sea"
                        },
                        new
                        {
                            Id = 2,
                            Available = "False",
                            ISBN = 54612342,
                            ReleaseYear = 2000,
                            Title = "Midnight"
                        },
                        new
                        {
                            Id = 3,
                            Available = "False",
                            ISBN = 54122312,
                            ReleaseYear = 1993,
                            Title = "Happy"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Model.Entities.LibraryUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LibraryCard")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraryCard")
                        .IsUnique();

                    b.ToTable("LibraryUser", "Library");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Sandra",
                            LastName = "Woo",
                            LibraryCard = 678345
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Carl",
                            LastName = "Loos",
                            LibraryCard = 678346
                        });
                });

            modelBuilder.Entity("LibraryAPI.Model.Entities.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LibraryUserId");

                    b.ToTable("Loan", "Library");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = false,
                            BookId = 1,
                            LibraryUserId = 1,
                            LoanDate = new DateTime(2024, 1, 7, 14, 2, 12, 49, DateTimeKind.Utc).AddTicks(3318),
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 2,
                            Available = false,
                            BookId = 2,
                            LibraryUserId = 1,
                            LoanDate = new DateTime(2024, 1, 9, 14, 2, 12, 49, DateTimeKind.Utc).AddTicks(3342),
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 3,
                            Available = false,
                            BookId = 3,
                            LibraryUserId = 2,
                            LoanDate = new DateTime(2024, 1, 8, 14, 2, 12, 49, DateTimeKind.Utc).AddTicks(3354),
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("LibraryAPI.Model.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Model.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAPI.Model.Entities.Loan", b =>
                {
                    b.HasOne("LibraryAPI.Model.Entities.LibraryUser", null)
                        .WithMany("Loans")
                        .HasForeignKey("LibraryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAPI.Model.Entities.LibraryUser", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
